<style>
.background-img {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url('https://www.shutterstock.com/image-photo/compliance-rules-law-regulation-policy-600nw-1171280545.jpg');
  background-size: cover;
  z-index: -1; 
}
</style>
<div class="background-img">
  <div class="mt-5 d-flex justify-content-around align-items-center">
    <div class="container">
      <div class="row">
        <div class="col-sm-9 col-md-7 col-lg mx-auto">
          <div class="card my-5 shadow">
            <div class="card-body">
              <div class="row">
              <div class="d-flex justify-content-center">
              <%= form_with url: products_path, method: :get do |f| %>
                <div class="field">
                <div class="d-flex justify-content-center">
                  <%= f.label :verification_code, "Verification Code" %>
                </div>
                  <div id="inputs" class="inputs" placeholder=<%= @user.verification_code %>"><input class="input" type="text" inputmode="numeric" maxlength="1" autofocus="true"><input class="input" type="text" inputmode="numeric" maxlength="1"><input class="input" type="text" inputmode="numeric" maxlength="1"><input class="input" type="text" inputmode="numeric" maxlength="1"><input class="input" type="text" inputmode="numeric" maxlength="1"><input class="input" type="text" inputmode="numeric" maxlength="1"></div>
                </div>
                <br>
                <div class="d-flex justify-content-center">
                <div class="actions">
                  <%= f.submit "Verify", class:"btn btn-secondary btn-lg" %>
                </div>
                </div>
              <% end %>  
                    </div>
                    </div>
                    </div>
                  </div>
                </div>
              </div>
            </div> 
  </div>
</div>

<script>
const inputs = document.getElementById("inputs");

inputs.addEventListener("input", function (e) {
  const target = e.target;
  const val = target.value;

  if (isNaN(val)) {
    target.value = "";
    return;
  }

  if (val != "") {
    const next = target.nextElementSibling;
    if (next) {
      next.focus();
    }
  }
});

inputs.addEventListener("keyup", function (e) {
  const target = e.target;
  const key = e.key.toLowerCase();

  if (key == "backspace" || key == "delete") {
    target.value = "";
    const prev = target.previousElementSibling;
    if (prev) {
      prev.focus();
    }
    return;
  }
});
</script>

<style>
.container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.input {
  width: 40px;
  border: none;
  border-bottom: 3px solid rgba(0, 0, 0, 0.5);
  margin: 0 10px;
  text-align: center;
  font-size: 36px;
  cursor: not-allowed;
  pointer-events: none;
}

.input:focus {
  border-bottom: 3px solid orange;
  outline: none;
}

.input:nth-child(1) {
  cursor: pointer;
  pointer-events: all;
}
</style>